
openapi: 3.0.3
info:
  title: AI Campus â€” Expenses API
  version: 1.0.0
servers:
  - url: https://your-deployment.vercel.app
paths:
  /api/auth/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string, minLength: 3 }
                password: { type: string, minLength: 6 }
      responses:
        "200":
          description: Registered
  /api/auth/login:
    post:
      summary: Login and set JWT cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        "200":
          description: OK
  /api/auth/session:
    get:
      summary: Returns current user from cookie
      responses: { "200": { description: OK }, "401": { description: Unauthorized } }
  /api/expenses:
    get:
      summary: List expenses with pagination, filter, search, sort
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 10, default: 5 }
        - in: query
          name: category
          schema: { type: string, enum: [TRAVEL, FOOD, OFFICE, OTHER] }
        - in: query
          name: reimbursable
          schema: { type: string, enum: ["true","false"] }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: sort
          schema: { type: string, example: "createdAt:desc" }
      responses: { "200": { description: OK }, "401": { description: Unauthorized } }
    post:
      summary: Create expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description, category, reimbursable, amount, taxRate]
              properties:
                description: { type: string }
                category: { type: string, enum: [TRAVEL, FOOD, OFFICE, OTHER] }
                reimbursable: { type: boolean }
                amount: { type: number }
                taxRate: { type: number }
      responses: { "201": { description: Created }, "401": { description: Unauthorized } }
  /api/expenses/{id}:
    get:
      summary: Get one
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses: { "200": { description: OK }, "401": { description: Unauthorized }, "404": { description: Not found } }
    put:
      summary: Update
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses: { "200": { description: OK }, "401": { description: Unauthorized }, "404": { description: Not found } }
    delete:
      summary: Delete
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses: { "204": { description: Deleted }, "401": { description: Unauthorized }, "404": { description: Not found } }
components: {}
